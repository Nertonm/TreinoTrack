USE FitLife;

-- 1. Liste os nomes de todos os usuários cadastrados no aplicativo
SELECT NOME, TIPO
FROM USUARIO
ORDER BY NOME;

-- 2. Exiba os exercícios cadastrados por um usuário específico na última semana
SELECT DISTINCT u.NOME AS NOME_USUARIO, e.NOME AS NOME_EXERCICIO, e.CATEGORIA
FROM REGISTRO_TREINO rt
JOIN USUARIO u ON rt.ID_USUARIO = u.ID_USUARIO
JOIN TREINO t ON rt.ID_TREINO = t.ID_TREINO
JOIN TREINO_EXERCICIO te ON t.ID_TREINO = te.ID_TREINO
JOIN EXERCICIO e ON te.ID_EXERCICIO = e.ID_EXERCICIO
WHERE rt.ID_USUARIO = 6  -- Substitua pelo ID do usuário desejado
  AND rt.DATA_INICIO >= DATE_SUB(CURDATE(), INTERVAL 7 DAY)
ORDER BY e.NOME;

-- 3. Mostre a quantidade de calorias queimadas por cada usuário no último mês
SELECT u.NOME, SUM(rt.CALORIAS_QUEIMADAS) AS TOTAL_CALORIAS
FROM REGISTRO_TREINO rt
JOIN USUARIO u ON rt.ID_USUARIO = u.ID_USUARIO
WHERE rt.DATA_INICIO >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH)
GROUP BY u.ID_USUARIO, u.NOME
ORDER BY TOTAL_CALORIAS DESC;

-- 4. Liste os usuários que realizaram mais de 20 sessões de exercício no último trimestre
SELECT u.NOME, COUNT(rt.ID_REGISTRO) AS SESSOES
FROM REGISTRO_TREINO rt
JOIN USUARIO u ON rt.ID_USUARIO = u.ID_USUARIO
WHERE rt.DATA_INICIO >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH)
GROUP BY u.ID_USUARIO, u.NOME
HAVING COUNT(rt.ID_REGISTRO) > 20
ORDER BY SESSOES DESC;

-- 5. Exiba a duração média das sessões de treino de cada usuário
SELECT u.NOME, 
       AVG(TIMESTAMPDIFF(MINUTE, rt.DATA_INICIO, rt.DATA_FIM)) AS DURACAO_MEDIA_MINUTOS
FROM REGISTRO_TREINO rt
JOIN USUARIO u ON rt.ID_USUARIO = u.ID_USUARIO
GROUP BY u.ID_USUARIO, u.NOME
ORDER BY DURACAO_MEDIA_MINUTOS DESC;

-- 6. Mostre os exercícios mais frequentes para cada categoria
SELECT e.CATEGORIA, e.NOME, COUNT(te.ID_EXERCICIO) AS FREQUENCIA
FROM TREINO_EXERCICIO te
JOIN EXERCICIO e ON te.ID_EXERCICIO = e.ID_EXERCICIO
GROUP BY e.CATEGORIA, e.NOME
ORDER BY e.CATEGORIA, FREQUENCIA DESC;

-- 7. Liste os usuários que atingiram 100% de suas metas no último mês
SELECT u.NOME, m.TITULO, m.DESCRICAO
FROM META m
JOIN USUARIO u ON m.ID_ALUNO = u.ID_USUARIO
WHERE m.CONCLUIDA = TRUE
AND m.DATA_CONCLUSAO >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH)
ORDER BY u.NOME;

-- 8. Exiba os treinos realizados nos últimos 7 dias, com data, duração e tipo
SELECT u.NOME, t.NOME AS TREINO, t.CATEGORIA,
       DATE(rt.DATA_INICIO) AS DATA,
       TIMESTAMPDIFF(MINUTE, rt.DATA_INICIO, rt.DATA_FIM) AS DURACAO_MINUTOS
FROM REGISTRO_TREINO rt
JOIN USUARIO u ON rt.ID_USUARIO = u.ID_USUARIO
JOIN TREINO t ON rt.ID_TREINO = t.ID_TREINO
WHERE rt.DATA_INICIO >= DATE_SUB(CURDATE(), INTERVAL 7 DAY)
ORDER BY u.NOME ASC, rt.DATA_INICIO DESC;

-- 9. Mostre os usuários que cadastraram rotinas de treino em mais de 3 categorias diferentes
SELECT u.NOME, COUNT(DISTINCT t.CATEGORIA) AS CATEGORIAS_DIFERENTES
FROM USUARIO_TREINO ut
JOIN USUARIO u ON ut.ID_USUARIO = u.ID_USUARIO
JOIN TREINO t ON ut.ID_TREINO = t.ID_TREINO
WHERE ut.ATIVO = TRUE
GROUP BY u.ID_USUARIO, u.NOME
HAVING COUNT(DISTINCT t.CATEGORIA) > 3
ORDER BY CATEGORIAS_DIFERENTES DESC;

-- 10. Liste os usuários que realizaram pelo menos 5 treinos semanais nos últimos 2 meses
SELECT u.NOME, 
       YEAR(rt.DATA_INICIO) AS ANO,
       WEEK(rt.DATA_INICIO, 1) AS SEMANA,
       COUNT(*) AS TREINOS_SEMANAIS
FROM REGISTRO_TREINO rt
JOIN USUARIO u ON rt.ID_USUARIO = u.ID_USUARIO
WHERE rt.DATA_INICIO >= DATE_SUB(CURDATE(), INTERVAL 2 MONTH)
GROUP BY u.ID_USUARIO, u.NOME, ANO, SEMANA
HAVING COUNT(*) >= 5
ORDER BY u.NOME, ANO, SEMANA;

-- 11. Liste os nomes dos usuários e as categorias de exercícios que realizaram nos últimos 7 dias
SELECT DISTINCT u.NOME, e.CATEGORIA
FROM REGISTRO_TREINO rt
JOIN USUARIO u ON rt.ID_USUARIO = u.ID_USUARIO
JOIN TREINO t ON rt.ID_TREINO = t.ID_TREINO
JOIN TREINO_EXERCICIO te ON t.ID_TREINO = te.ID_TREINO
JOIN EXERCICIO e ON te.ID_EXERCICIO = e.ID_EXERCICIO
WHERE rt.DATA_INICIO >= DATE_SUB(CURDATE(), INTERVAL 7 DAY)
ORDER BY u.NOME, e.CATEGORIA;

-- 12. Mostre o total de horas de treino por usuário para cada tipo de exercício
SELECT u.NOME, e.CATEGORIA,
       ROUND(SUM(TIMESTAMPDIFF(MINUTE, rt.DATA_INICIO, rt.DATA_FIM)) / 60, 2) AS TOTAL_HORAS
FROM REGISTRO_TREINO rt
JOIN USUARIO u ON rt.ID_USUARIO = u.ID_USUARIO
JOIN TREINO t ON rt.ID_TREINO = t.ID_TREINO
JOIN TREINO_EXERCICIO te ON t.ID_TREINO = te.ID_TREINO
JOIN EXERCICIO e ON te.ID_EXERCICIO = e.ID_EXERCICIO
GROUP BY u.ID_USUARIO, u.NOME, e.CATEGORIA
ORDER BY u.NOME, TOTAL_HORAS DESC;